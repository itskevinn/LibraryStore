using System;
using System.Threading.Tasks;
using Domain.Entities;
using Domain.Entities.Base;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;

namespace Infrastructure.Repository
{
  public class PersistenceContext : DbContext
  {
    private readonly IConfiguration _config;

    public PersistenceContext(DbContextOptions<PersistenceContext> options, IConfiguration config) : base(options)
    {
      _config = config;
    }

    public async Task CommitAsync()
    {
      await SaveChangesAsync().ConfigureAwait(false);
    }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
      modelBuilder.HasDefaultSchema(_config.GetValue<string>("SchemaName"));
      modelBuilder.Entity<Author>();
      modelBuilder.Entity<Book>();
      modelBuilder.Entity<Genre>();
      modelBuilder.Entity<Publisher>();

      foreach (var entityType in modelBuilder.Model.GetEntityTypes())
      {
        var t = entityType.ClrType;
        if (!typeof(DomainEntity).IsAssignableFrom(t)) continue;
        modelBuilder.Entity(entityType.Name).Property<DateTime>("CreatedOn").HasDefaultValueSql("GETDATE()");
        modelBuilder.Entity(entityType.Name).Property<DateTime>("LastModifiedOn").HasDefaultValueSql("GETDATE()");
      }

      modelBuilder.Entity<Book>(
        entity =>
        {
          entity.HasOne(b => b.Author)
            .WithMany(a => a.Books)
            .HasForeignKey("AuthorId");
        });
      modelBuilder.Entity<Book>(
        entity =>
        {
          entity.HasOne(b => b.Genre)
            .WithMany(a => a.Books)
            .HasForeignKey("GenreId");
        });
      modelBuilder.Entity<Book>(
        entity => { entity.HasOne(b => b.Publisher); });

      #region PublisherSeed

      modelBuilder.Entity<Publisher>().HasData(
        new
        {
          Id = new Guid("40000001-0001-0001-0001-000000000001"), Name = "Castellana", Status = true,
          CreatedBy = "AutoGenerated",
          CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated", LastModifiedOn = new DateTime()
        },
        new Publisher
        {
          Id = new Guid("50000001-0001-0001-0001-000000000002"), Name = "Babel", Status = true,
          CreatedBy = "AutoGenerated", CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated",
          LastModifiedOn = new DateTime(),
        });

      #endregion

      #region AuthorSeed

      modelBuilder.Entity<Author>().HasData(new Author
      {
        Id = new Guid("20000001-0001-0001-0001-000000000001"), FirstName = "Pepito", LastName = "PÃ©rez", Status = true,
        CreatedBy = "AutoGenerated",
        BirthDate = new DateTime(), CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated",
        LastModifiedOn = new DateTime()
      });

      #endregion

      #region GenreSeed

      modelBuilder.Entity<Genre>().HasData(new Genre
      {
        Id = new Guid("30000001-0001-0001-0001-000000000001"), Name = "Comedy", Description = "Short description",
        CreatedBy = "AutoGenerated",
        CreatedOn = new DateTime(), UpdatedBy = "AutoGenerated", Status = true, LastModifiedOn = new DateTime()
      });

      #endregion

      #region BookSeed

      modelBuilder.Entity<Book>().HasData(new Book
      {
        Id = new Guid("10000001-0001-0001-0001-000000000001"), Name = "Guns", Description = "Short description",
        CreatedBy = "AutoGenerated",
        CreatedOn = new DateTime(), AuthorId = new Guid("20000001-0001-0001-0001-000000000001"),
        GenreId = new Guid("30000001-0001-0001-0001-000000000001"), UpdatedBy = "AutoGenerated",
        PublisherId = new Guid("40000001-0001-0001-0001-000000000001"),
      });

      #endregion

      base.OnModelCreating(modelBuilder);
    }
  }
}